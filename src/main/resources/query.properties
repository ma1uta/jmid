#
# Copyright sablintolya@gmail.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

association.findByAddressMedium=select * from only "association" where medium = :medium and address = :address
association.insertOrIgnore=insert into "association"(medium, address, mxid, created, expired, ts)  \
  values(:medium, :address, :mxid, extract(seconds from now), :expired, extract(seconds from now)) \
  on conflict (medium, address) do nothing
association.expire=with moved_rows as ( \
    delete from "association"           \
    where expired > now                 \
    returning *                         \
  ) insert into "expired_association"   \
  select * from moved_rows;

session.insertOrUpdate=insert into "session"(sid, token, client_secret, medium, address, send_attempt, next_link, created)   \
  values(:sid, :token, :client_secret, :medium, :address, :send_attempt, :next_link, now)                                    \
  on conflict (client_secret, address, medium) do update                                                                     \
  set                                                                                                                        \
    send_attempt = :send_attempt
session.findBySecretEmail=select * from "session" where client_secret = :client_secret and email = :email
session.findBySecretSid=select * from "session" where client_secret = :client_secret and sid = :sid
session.findBySecretTokenSid=select * from "session" where client_secret = :client_secret and token = :token and sid = :sid
session.deleteOldest=delete from "session" where validated is null and created + interval '1 day' < now
session.validate=update "session" set validated = now where sid = :sid

invitation.insert=insert into "invitation"(medium, address, room_id, sender, token, public_key, display_name) \
  values(:medium, :address, :room_id, :sender, :token, :public_key, :display_name)
invitation.findByMediumAddress=select * from "invitation" where medium = :medium and address = :address
